{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/cursor/training-app/components/ui/TextType.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { ElementType, useEffect, useRef, useState, createElement } from \"react\";\r\nimport { gsap } from \"gsap\";\r\n\r\ninterface TextTypeProps {\r\n  className?: string;\r\n  showCursor?: boolean;\r\n  hideCursorWhileTyping?: boolean;\r\n  cursorCharacter?: string | React.ReactNode;\r\n  cursorBlinkDuration?: number;\r\n  cursorClassName?: string;\r\n  text: string | string[];\r\n  as?: ElementType;\r\n  typingSpeed?: number;\r\n  initialDelay?: number;\r\n  pauseDuration?: number;\r\n  deletingSpeed?: number;\r\n  loop?: boolean;\r\n  textColors?: string[];\r\n  variableSpeed?: { min: number; max: number };\r\n  onSentenceComplete?: (sentence: string, index: number) => void;\r\n  startOnVisible?: boolean;\r\n  reverseMode?: boolean;\r\n}\r\n\r\nconst TextType = ({\r\n  text,\r\n  as: Component = \"div\",\r\n  typingSpeed = 50,\r\n  initialDelay = 0,\r\n  pauseDuration = 2000,\r\n  deletingSpeed = 30,\r\n  loop = true,\r\n  className = \"\",\r\n  showCursor = true,\r\n  hideCursorWhileTyping = false,\r\n  cursorCharacter = \"|\",\r\n  cursorClassName = \"\",\r\n  cursorBlinkDuration = 0.5,\r\n  textColors = [],\r\n  variableSpeed,\r\n  onSentenceComplete,\r\n  startOnVisible = false,\r\n  reverseMode = false,\r\n  ...props\r\n}: TextTypeProps & React.HTMLAttributes<HTMLElement>) => {\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [currentCharIndex, setCurrentCharIndex] = useState(0);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n  const [isVisible, setIsVisible] = useState(!startOnVisible);\r\n  const cursorRef = useRef<HTMLSpanElement>(null);\r\n  const containerRef = useRef<HTMLElement>(null);\r\n\r\n  const textArray = Array.isArray(text) ? text : [text];\r\n\r\n  const getRandomSpeed = () => {\r\n    if (!variableSpeed) return typingSpeed;\r\n    const { min, max } = variableSpeed;\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n\r\n  const getCurrentTextColor = () => {\r\n    if (textColors.length === 0) return \"#bfbfbf\";\r\n    return textColors[currentTextIndex % textColors.length];\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!startOnVisible || !containerRef.current) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            setIsVisible(true);\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.1 },\r\n    );\r\n\r\n    observer.observe(containerRef.current);\r\n    return () => observer.disconnect();\r\n  }, [startOnVisible]);\r\n\r\n  useEffect(() => {\r\n    if (showCursor && cursorRef.current) {\r\n      gsap.set(cursorRef.current, { opacity: 1 });\r\n      gsap.to(cursorRef.current, {\r\n        opacity: 0,\r\n        duration: cursorBlinkDuration,\r\n        repeat: -1,\r\n        yoyo: true,\r\n        ease: \"power2.inOut\",\r\n      });\r\n    }\r\n  }, [showCursor, cursorBlinkDuration]);\r\n\r\n  useEffect(() => {\r\n    if (!isVisible) return;\r\n\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    const currentText = textArray[currentTextIndex];\r\n    const processedText = reverseMode\r\n      ? currentText.split(\"\").reverse().join(\"\")\r\n      : currentText;\r\n\r\n    const executeTypingAnimation = () => {\r\n      if (isDeleting) {\r\n        if (displayedText === \"\") {\r\n          setIsDeleting(false);\r\n          if (currentTextIndex === textArray.length - 1 && !loop) {\r\n            return;\r\n          }\r\n\r\n          if (onSentenceComplete) {\r\n            onSentenceComplete(textArray[currentTextIndex], currentTextIndex);\r\n          }\r\n\r\n          setCurrentTextIndex((prev) => (prev + 1) % textArray.length);\r\n          setCurrentCharIndex(0);\r\n          timeout = setTimeout(() => {}, pauseDuration);\r\n        } else {\r\n          timeout = setTimeout(() => {\r\n            setDisplayedText((prev) => prev.slice(0, -1));\r\n          }, deletingSpeed);\r\n        }\r\n      } else {\r\n        if (currentCharIndex < processedText.length) {\r\n          timeout = setTimeout(\r\n            () => {\r\n              setDisplayedText(\r\n                (prev) => prev + processedText[currentCharIndex],\r\n              );\r\n              setCurrentCharIndex((prev) => prev + 1);\r\n            },\r\n            variableSpeed ? getRandomSpeed() : typingSpeed,\r\n          );\r\n        } else if (textArray.length > 1) {\r\n          timeout = setTimeout(() => {\r\n            setIsDeleting(true);\r\n          }, pauseDuration);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (currentCharIndex === 0 && !isDeleting && displayedText === \"\") {\r\n      timeout = setTimeout(executeTypingAnimation, initialDelay);\r\n    } else {\r\n      executeTypingAnimation();\r\n    }\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [\r\n    currentCharIndex,\r\n    displayedText,\r\n    isDeleting,\r\n    typingSpeed,\r\n    deletingSpeed,\r\n    pauseDuration,\r\n    textArray,\r\n    currentTextIndex,\r\n    loop,\r\n    initialDelay,\r\n    isVisible,\r\n    reverseMode,\r\n    variableSpeed,\r\n    onSentenceComplete,\r\n  ]);\r\n\r\n  const shouldHideCursor =\r\n    hideCursorWhileTyping &&\r\n    (currentCharIndex < textArray[currentTextIndex].length || isDeleting);\r\n\r\n  return createElement(\r\n    Component,\r\n    {\r\n      ref: containerRef,\r\n      className: `inline-block whitespace-pre-wrap tracking-tight ${className}`,\r\n      ...props,\r\n    },\r\n    <span className=\"inline\" style={{ color: getCurrentTextColor() }}>\r\n      {displayedText}\r\n    </span>,\r\n    showCursor && (\r\n      <span\r\n        ref={cursorRef}\r\n        className={`ml-1 inline-block opacity-100 ${shouldHideCursor ? \"hidden\" : \"\"} ${cursorClassName}`}\r\n      >\r\n        {cursorCharacter}\r\n      </span>\r\n    ),\r\n  );\r\n};\r\n\r\nexport default TextType;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}